<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities</name>
    </assembly>
    <members>
        <member name="M:Utilities.ConvertUtils.ToShort(System.Object,System.Int16)">
            <summary>
            将具有short值的对象转为short
            </summary>
            <param name="objShort"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToInt(System.Object,System.Int32)">
            <summary>
            将具有int值的对象转为int
            </summary>
            <param name="objInt"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToLong(System.Object,System.Int64)">
            <summary>
            将具有long值的对象转为long
            </summary>
            <param name="objLong"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToChineseFigures``1(``0)">
            <summary>
            将阿拉伯数字转为中国数字
            </summary>
            <typeparam name="T"></typeparam>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToUpperChineseFigures``1(``0)">
            <summary>
            将阿拉伯数字转为中国大写数字
            </summary>
            <typeparam name="T"></typeparam>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToBool(System.Object,System.Boolean)">
            <summary>
            将具有bool值的对象转为bool
            </summary>
            <param name="objBool"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将具有DateTime值的对象转为DateTime
            </summary>
            <param name="objDateTime"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToDateTime(System.Int64)">
            <summary>
            将时间戳转为DateTime对象
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToTimestamp(System.DateTime)">
            <summary>
            将事件转为Unix时间戳
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.ConvertUtils.ToTimestamp">
            <summary>
            获取当前时间的Unix时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.IsNullOrEmpty(System.Data.DataTable)">
            <summary>
            获取一个值，改值指示指定的DataTable是不是NULL或者行数为空
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.ImportTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            将一个源DataTable的行复制到目标DataTable
            </summary>
            <param name="targetDt"></param>
            <param name="sourceDt"></param>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            获取DataRow指定列的值在Sql语句中表示形式，一般非数值类型会加单引号
            </summary>
            <param name="dr">DataRow</param>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Int32)">
            <summary>
            <seealso cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn)"/>
            </summary>
            <param name="dr"><seealso cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn)"/></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.String)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn)"/>
            </summary>
            <param name="dr"><see cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn)"/></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn,System.Data.DbType)">
            <summary>
            获取DataRow指定列的值转换为指定DbType类型的值，该值可用作于DBParameter的Value
            </summary>
            <param name="dr"></param>
            <param name="dc"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Int32,System.Data.DbType)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn,System.Data.DbType)"/>
            </summary>
            <param name="dr"></param>
            <param name="colIndex"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.String,System.Data.DbType)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.SqlValue(System.Data.DataRow,System.Data.DataColumn,System.Data.DbType)"/>
            </summary>
            <param name="dr"></param>
            <param name="colName"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            获取指定DataRow的指定列的值，并将值转换为指定的类型
            </summary>
            <typeparam name="T">将值转换到的类型</typeparam>
            <param name="dr"></param>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Int32)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.String)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn,``0)">
            <summary>
            获取指定DataRow的指定列的值，并将值转换为指定的类型，如果转换失败则返回指定的默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="dc"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Int32,``0)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn,``0)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="colIndex"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.String,``0)">
            <summary>
            <see cref="M:Utilities.Data.DataTableUtils.Value``1(System.Data.DataRow,System.Data.DataColumn,``0)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="colName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DataTableUtils.Where(System.Data.DataTable,System.Predicate{System.Data.DataRow})">
            <summary>
            按指定条件筛选指定的DataTable的所有行
            </summary>
            <param name="dt"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Data.DefaultSqlClientProvider.#ctor(System.Func{System.Data.Common.DbConnection},System.Func{System.String,System.Data.CommandType,System.Data.Common.DbCommand},System.Func{System.Data.Common.DbDataAdapter})">
            <summary>
            使用连接字符串实例化新的Provider
            </summary>
            <param name="connectionStringProvider"></param>
            <param name="connectionProvider"></param>
            <param name="commandProvider"></param>
            <param name="dataAdapterProvider"></param>
        </member>
        <member name="M:Utilities.Drawing.ColorUtils.GetSimilarColor(System.Drawing.Color,System.Boolean,System.SByte)">
            <summary>
            获取与指定颜色相近的颜色
            </summary>
            <param name="c">指定的颜色</param>
            <param name="deep">True:加深 False:变浅</param>
            <param name="level">指定的加深或变浅的程度</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Drawing.ColorUtils.GetOppositeColor(System.Drawing.Color)">
            <summary>
            获取指定颜色的反差色
            </summary>
            <param name="c">指定的颜色</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.EnumUtils">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:Utilities.EnumUtils.GetEnumDescription(System.Enum)">
            <summary>
            获取指定枚举项的Description
            </summary>
            <param name="enum">枚举项</param>
            <returns>返回DescriptionAttribute的描述</returns>
        </member>
        <member name="M:Utilities.EnumUtils.GetEnumDescriptions(System.Enum)">
            <summary>
            获取指定枚举项组合的Description
            </summary>
            <param name="enum">枚举项</param>
            <returns>返回DescriptionAttribute的描述</returns>
        </member>
        <member name="M:Utilities.EnumUtils.GetEnumDescriptions(System.Type)">
            <summary>
            获取指定枚举类型的项与项描述的表
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.EnumUtils.GetEnumArrayDescriptions``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取指定枚举项集合的描述
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="enumArray">枚举项集合</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.EnumUtils.GetName(System.Enum)">
            <summary>
            获取指定枚举项的名称
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="F:Utilities.Json.MultiObjectsSerializationOption.ReplaceAll">
            <summary>
            后面的obj属性会替换前面的obj的同名属性
            </summary>
        </member>
        <member name="F:Utilities.Json.MultiObjectsSerializationOption.ReplaceNull">
            <summary>
            后面的obj会替换前面obj值为null的同名属性
            </summary>
        </member>
        <member name="F:Utilities.Json.MultiObjectsSerializationOption.ReplaceIngoreNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:Utilities.Json.MultiObjectsSerializationOption.NoReplace">
            <summary>
            后面的obj不会替换前面obj的同名属性
            </summary>
        </member>
        <member name="T:Utilities.MappingUtils">
            <summary>
            对象映射工具类
            </summary>
        </member>
        <member name="M:Utilities.MappingUtils.MapPropertiesFrom``1(System.Object[])">
            <summary>
            将源对象的属性值赋给目标对象的同名属性
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapPropertiesFrom``1(``0,System.Object[])">
            <summary>
            将源对象的属性值赋给目标对象的同名属性
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="targetObj">目标对象实例</param>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFiledsFrom``1(System.Object[])">
            <summary>
            将源对象的字段值赋给目标对象的同名字段
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFieldsFrom``1(``0,System.Object[])">
            <summary>
            将源对象的字段值赋给目标对象的同名字段
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="targetObj">目标对象实例</param>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFrom``1(System.Object[])">
            <summary>
            将源对象的属性和字段值赋给目标对象的同名属性和字段
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFrom``1(``0,System.Object[])">
            <summary>
            将源对象的属性和字段值赋给目标对象的同名属性和字段
            </summary>
            <typeparam name="T">目标对象类型</typeparam>
            <param name="targetObj">目标对象实例</param>
            <param name="sourceObjs">源对象集合</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapPropertiesTo``1(System.Object)">
            <summary>
            将源对象的属性值赋给目标对象的同名属性
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <returns>目标类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapPropertiesTo``1(System.Object,``0)">
            <summary>
            将源对象的属性值赋给目标对象的同名属性
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <param name="targetObj">目标对象</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFieldsTo``1(System.Object)">
            <summary>
            将源对象的字段值赋给目标对象的同名字段
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <returns>目标类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapFieldsTo``1(System.Object,``0)">
            <summary>
            将源字段的属性值赋给目标对象的同名字段
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <param name="targetObj">目标对象</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapTo``1(System.Object)">
            <summary>
            将源对象的属性与字段值赋给目标对象的同名属性与字段
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <returns>目标类型的新实例</returns>
        </member>
        <member name="M:Utilities.MappingUtils.MapTo``1(System.Object,``0)">
            <summary>
            将源对象的属性与字段值赋给目标对象的同名属性与字段
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="sourceObj">源对象</param>
            <param name="targetObj">目标对象</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:Utilities.Math.MathConvert.ToString``1(``0,System.Int32)">
            <summary>
            将数字转为2-64进制的数字字符串
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="toBase">2-64</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Net.IPUtils.GetLocalHostInnerIpv4">
            <summary>
            获取当前主机的内网Ipv4地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Net.PortUtils.GetUsedIPEndPoints">
            <summary>
            获取正在使用的端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Net.PortUtils.IsUsedIPEndPoint(System.Int32)">
             
            判断指定的网络端点（只判断端口）是否被使用  
             
        </member>
        <member name="M:Utilities.Net.PortUtils.IsUsedIPEndPoint(System.String,System.Int32)">
             
            判断指定的网络端点（判断IP和端口）是否被使用  
             
        </member>
        <member name="M:Utilities.Net.PortUtils.GetOneUnusedPort(System.Int32)">
            
             返回可用端口号
            
             端口开始数字
            
        </member>
        <member name="M:Utilities.Net.PortUtils.IsPort(System.Int32)">
            <summary>
            获取一个值，该值指示指定的端口号是不是有效的端口号
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.RandomHelper">
            <summary>
            Random帮助类
            </summary>
        </member>
        <member name="M:Utilities.Reflection.RuntimeUtils.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            获取指定对象的指定名称的私有字段的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Reflection.RuntimeUtils.GetCaller">
            <summary>
            获取调用此方法的方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Reflection.RuntimeUtils.GetCaller(System.Type)">
            <summary>
            自下而上获取具有指定标记的方法体
            </summary>
            <param name="typeOfAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Base64Helper.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            base64加密
            </summary>
            <param name="inputText">要加密的字符串</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Base64Helper.FormBase64String(System.String,System.Text.Encoding)">
            <summary>
            base64解密
            </summary>
            <param name="inputText">要解密的字符串</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.CrcHelper">
            <summary>
            CRC计算类
            </summary>
        </member>
        <member name="M:Utilities.Security.CrcHelper.GetCRC32Table">
            <summary>
            获取CRC32表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.CrcHelper.GetCRC32(System.Byte[])">
            <summary>
            计算CRC32值
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.CrcHelper.GetCRC32Str(System.String)">
            <summary>
            计算指定字符串的CRC32值
            </summary>
            <param name="sInputString"></param>
            <returns></returns>
        </member>
        <member name="F:Utilities.Security.DesHelper.hash">
            <summary>
            密钥加密算法，默认为SHA1
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.encoding">
            <summary>
            获取或设置文本编码的方式
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.StringKey">
            <summary>
            通过字符串设置密钥
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.IV">
            <summary>
            设置对称加密算法的初始化向量
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.KeySize">
            <summary>
             获取密钥大小
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.LegalKeySizes">
            <summary>
            获取支持的密钥大小
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.LegalBlockSizes">
            <summary>
            获取支持的块大小
            </summary>
        </member>
        <member name="P:Utilities.Security.DesHelper.SupportedKeySize">
            <summary>
            获取支持的密钥大小
            </summary>
        </member>
        <member name="M:Utilities.Security.DesHelper.EncryptString(System.String)">
            <summary>
             加密字符串
            </summary>
            <param name="scr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.DecryptString(System.String)">
            <summary>
             解密字符串
            </summary>
            <param name="scr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.EncryptFile(System.String,System.String)">
            <summary>
             加密文件
            </summary>
            <param name="filePath">要加密的文件位置</param>
            <param name="savePath">加密后文件保存到的位置</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.DecryptFile(System.String,System.String)">
            <summary>
            解密文件
            </summary>
            <param name="filePath">要解密的文件</param>
            <param name="savePath">解密后保存到的位置</param>
            <param name="keyStr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.EncryptString(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="inputStr">输入字符串</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns>输出加密后字符串</returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.SDecryptString(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="inputStr">要解密的字符串</param>
            <param name="keyStr">密钥</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="M:Utilities.Security.DesHelper.EncryptFile(System.String,System.String,System.String)">
            <summary>
            加密文件
            </summary>
            <param name="filePath">输入文件路径</param>
            <param name="savePath">加密后输出文件路径</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns></returns>  
        </member>
        <member name="M:Utilities.Security.DesHelper.DecryptFile(System.String,System.String,System.String)">
            <summary>
            解密文件
            </summary>
            <param name="filePath">输入文件路径</param>
            <param name="savePath">解密后输出文件路径</param>
            <param name="keyStr">密码，可以为“”</param>
            <returns></returns>    
        </member>
        <member name="M:Utilities.Security.HashHelper.StringMd5(System.String)">
            <summary>
            获取文本32位MD5
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringSHA1(System.String)">
            <summary>
            获取文本SHA1
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringSHA256(System.String)">
            <summary>
            获取文本SHA256
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringSHA384(System.String)">
            <summary>
            获取文本SHA384
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringSHA512(System.String)">
            <summary>
            获取文本SHA512
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringHmacSHA1(System.String,System.String)">
            <summary>
            获取文本HMACSHA1
            </summary>
            <param name="text"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringHmacSHA256(System.String,System.String)">
            <summary>
            获取文本HMACSHA256
            </summary>
            <param name="text"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.StringHmacSHA512(System.String,System.String)">
            <summary>
            获取文本HMACSHA512
            </summary>
            <param name="text"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.FileMD5(System.String)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="path">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.FileSHA1(System.String)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="path">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.FileSHA256(System.String)">
            <summary>
            计算文件的 sha256 值
            </summary>
            <param name="path">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.FileSHA384(System.String)">
            <summary>
            计算文件的 sha384 值
            </summary>
            <param name="path">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Utilities.Security.HashHelper.FileSHA512(System.String)">
            <summary>
            计算文件的 sha512 值
            </summary>
            <param name="path">要计算 MD5 值的文件名和路径</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="P:Utilities.Security.RsaHelper.KeySize">
            <summary>
            密钥长度
            </summary>
        </member>
        <member name="P:Utilities.Security.RsaHelper.PublicOnly">
            <summary>
            是否只能加密
            </summary>
        </member>
        <member name="M:Utilities.Security.RsaHelper.#ctor(System.Int32)">
            <summary>
            rsa密钥长度
            </summary>
            <param name="keySize"></param>
        </member>
        <member name="M:Utilities.Security.RsaHelper.Reset(System.Int32)">
            <summary>
            随机生成密钥对
            </summary>
        </member>
        <member name="M:Utilities.Security.RsaHelper.ToXmlString(System.Boolean)">
            <summary>
            获取密钥
            </summary>
            <param name="OnlyPublic"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.FromXmlString(System.String)">
            <summary>
            设置rsa密钥
            </summary>
            <param name="xmlKey"></param>
            <param name="keySize"></param>
        </member>
        <member name="M:Utilities.Security.RsaHelper.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="toEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="ToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.FromXmlString(System.Security.Cryptography.RSA,System.String)">
            <summary>
            设置指定rsa对象的key
            </summary>
            <param name="rsa"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Utilities.Security.RsaHelper.ToXmlString(System.Security.Cryptography.RSA,System.Boolean)">
            <summary>
            将指定rsa对象的key序列化为xml
            </summary>
            <param name="rsa"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.JustDecrypt(System.String)">
            2048位RSA解密，仅可以解密本类中RSAEncrypt函数加密的字符串
            <param name="xmlPrivateKeys">私钥</param>
            <param name="toDecrypt">要解密的数据</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.JustEncrypt(System.String)">
            <summary>
            2048位RSA加密,仅可以用本类中的RSADecrypt函数解密
            </summary>
            <param name="xmlPublicKeys">公钥</param>
            <param name="toEncrypt">要加密的数据</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.Decrypt(System.String,System.String)">
            函数加密的字符串
            <param name="xmlPrivateKey">私钥</param>
            <param name="toDecrypt">要解密的数据</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.Encrypt(System.String,System.String)">
            <summary>
            RSA加密,仅可以用本类中的RSADecrypt函数解密
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="toEncrypt">要加密的数据</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.IsXmlKey(System.String)">
            <summary>
            判断是不是合法的密钥
            </summary>
            <param name="xmlKey">检测的密钥</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.RsaHelper.GetKeySize(System.String)">
            <summary>
            获取指定密钥的大小
            </summary>
            <param name="xmlKey"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Text.FigureUtils.ToRmbUpperFormat(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:Utilities.Text.PinyinUtils.ToPinyin(System.String)">
            <summary>
            汉字转换成全拼的拼音
            </summary>
            <param name="hz">汉字字符串</param>
            <returns>转换后的拼音字符串</returns>
        </member>
        <member name="M:Utilities.Text.PinyinUtils.GetFirstLetter(System.String)">
            <summary>
            获取字符串中汉字的首字母
            </summary>
            <param name="hz">汉字字符串</param>
            <returns>输出汉字首字母字符串</returns>
        </member>
        <member name="M:Utilities.Text.PinyinUtils.GetCodstring(System.String)">
            <summary>
            获取汉字拼音的首字母
            </summary>
            <param name="hz">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsMobilePhone(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是手机号
            </summary>
            <param name="mobilePhone">手机号</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsTelephone(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是固定电话号
            </summary>
            <param name="mobilePhone">固定电话号</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsIPv4(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是ipv4
            </summary>
            <param name="mobilePhone">ipv4</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsEmail(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是邮箱地址
            </summary>
            <param name="mobilePhone">邮箱地址</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsIdCard(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是身份证号
            </summary>
            <param name="mobilePhone">身份证号</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsDate(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是日期字符串
            </summary>
            <param name="mobilePhone">日期字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsTime(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是时间字符串
            </summary>
            <param name="mobilePhone">时间字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsDateTime(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是日期时间字符串
            </summary>
            <param name="mobilePhone">日期时间字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsFtpURL(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是FTP地址
            </summary>
            <param name="mobilePhone">FTP地址</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsHttpURL(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是HTTP(s)地址
            </summary>
            <param name="mobilePhone">HTTP(s)地址</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Utilities.Text.RegexUtils.IsDomain(System.String)">
            <summary>
            获取一个值该值指示指定的字符串是不是域名
            </summary>
            <param name="mobilePhone">域名</param>
            <returns>true/false</returns>
        </member>
    </members>
</doc>
